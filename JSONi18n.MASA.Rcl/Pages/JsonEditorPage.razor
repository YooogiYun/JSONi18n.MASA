@* Share Pages *@

@using System.Text.Json
@using System.Text.Json.Nodes

@page "/jsonedtior"

<MBreadcrumbs Items="items2" Class="mt-n6 ml-n6 mb-n2">
    <ItemContent>
        <MBreadcrumbsItem Href="@context.Href" Disabled="context.Disabled" Context="itemContext">
            @context.Text?.ToUpper()
        </MBreadcrumbsItem>
    </ItemContent>
</MBreadcrumbs>

<MCard>
    <MToolbar Color="primary"
              Dark
              Flat>
        <MIcon>mdi-silverware</MIcon>
        <MToolbarTitle>Local hotspots</MToolbarTitle>
    </MToolbar>

    <MRow>
        <MCol>
            <MCardText>
                <MTreeview @bind-Value="tree"
                           LoadChildren="Fetch"
                           TKey="string"
                           TItem="Item"
                           Items="items"
                           ItemKey="item => item.Id"
                           ItemText="item => item.Name"
                           ItemChildren="item => item.Children"
                           SelectedColor="indigo"
                           OpenOnClick
                           Selectable
                            ReturnObject
                            ExpandIcon="mdi-chevron-down"
                            OnIcon="mdi-bookmark"
                            OffIcon="mdi-bookmark-outline"
                            IndeterminateIcon="mdi-bookmark-minus">
                 </MTreeview>
             </MCardText>
         </MCol>

         <MDivider Vertical></MDivider>

         <MCol Cols="12"
               Md="6">
             <MCardText>
                 @if(tree.Count == 0)
                {
                    <div key="title"
                         class="text-h6 font-weight-light grey--text pa-4 text-center">
                        Select your favorite breweries
                    </div>
                }

                <ScrollXTransition>
                    @foreach(var (selection, i) in tree.Select((item , i) => (item, i)))
                    {
                        <MChip @key="i" Color="grey" Dark Small Class="ma-1">
                             <MIcon Left Small>mdi-beer</MIcon>
                             @selection
                        </MChip>
                    }
                </ScrollXTransition>
            </MCardText>
        </MCol>
    </MRow>

    <MDivider></MDivider>

    <MCardActions>
        <MButton Text
                  OnClick="() => tree.Clear()">
             Reset
         </MButton>

         <MSpacer></MSpacer>

         <MButton Class="white--text"
                  Color="green darken-1"
                 Depressed>
            Save
            <MIcon Right>
                mdi-content-save
            </MIcon>
        </MButton>
    </MCardActions>
</MCard>

<MExpansionPanels>
    <MExpansionPanel>
        <MExpansionPanelHeader>
            <MRow NoGutters>
                <MCol Cols="4">
                    Trip name
                </MCol>
                <MCol Cols="8"
                      Class="text--secondary">
                    <FadeTransition LeaveAbsolute>
                        <IfTransitionElement Tag="span" Value="context">
                            Enter a name for the trip
                        </IfTransitionElement>
                        <IfTransitionElement Tag="span" Value="!context">
                            @trip.name
                        </IfTransitionElement>
                    </FadeTransition>
                </MCol>
            </MRow>
        </MExpansionPanelHeader>
        <MExpansionPanelContent>
            <MTextField @bind-Value="@trip.name"
                        placeholder="Caribbean Cruise">
            </MTextField>
        </MExpansionPanelContent>
    </MExpansionPanel>

    <MExpansionPanel>
        <MExpansionPanelHeader>
            <MRow NoGutters>
                <MCol Cols="4">
                    Location
                </MCol>
                <MCol Cols="8"
                      Class="text--secondary">
                    <FadeTransition LeaveAbsolute>
                        <IfTransitionElement Tag="span" Value="context">
                            Select trip destination
                        </IfTransitionElement>
                        <IfTransitionElement Tag="span" Value="!context">
                            @trip.location
                        </IfTransitionElement>
                    </FadeTransition>
                </MCol>
            </MRow>
        </MExpansionPanelHeader>
        <MExpansionPanelContent>
            <MRow NoGutters>
                <MSpacer></MSpacer>
                <MCol Cols="5">
                    <MSelect @bind-Value="trip.location"
                             Items="locations"
                             ItemValue="item => item"
                             ItemText="item => item"
                             Chips
                             Flat
                             Solo>
                    </MSelect>
                </MCol>

                <MDivider Vertical
                           Class="mx-4">
                 </MDivider>

                 <MCol Cols="3">
                     Select your destination of choice
                     <br>
                     <a href="/components/expansion-panels">Learn more</a>
                 </MCol>
             </MRow>

             <MCardActions>
                 <MSpacer></MSpacer>
                 <MButton Text
                          Color="secondary">
                     Cancel
                 </MButton>
                 <MButton Text
                          Color="primary">
                     Save
                 </MButton>
             </MCardActions>
         </MExpansionPanelContent>
     </MExpansionPanel>

     <MExpansionPanel>
         <MExpansionPanelHeader>
             <MRow NoGutters>
                <MCol Cols="4">
                    Start and end dates
                </MCol>
                <MCol Cols="8"
                      Class="text--secondary">
                    <FadeTransition LeaveAbsolute>
                        <IfTransitionElement Tag="span" Value="context">
                            When do you want to travel?
                        </IfTransitionElement>
                        @*TODO: refactor BRow to support IfElse*@
                        <IfTransitionElement Tag="div" Style="width:100%" Value="!context">
                            <MRow NoGutters
                                   Style="width: 100%">
                                 <MCol Cols="6">
                                     Start date: @(trip.start ?? "Not set")
                                </MCol>
                                <MCol Cols="6">
                                    End date: @(trip.end ?? "Not set")
                                </MCol>
                            </MRow>
                        </IfTransitionElement>
                    </FadeTransition>
                </MCol>
            </MRow>
        </MExpansionPanelHeader>
        <MExpansionPanelContent>
            <MRow Justify="JustifyTypes.SpaceAround"
                  NoGutters>
                <MCol Cols="3">
                    <MMenu @bind-Value="visible"
                           CloseOnContentClick="false"
                           OffsetY
                            MinWidth="290">
                         <ActivatorContent>
                             <MTextField @bind-Value="trip.start"
                                         Label="Start date"
                                         PrependIcon="mdi-calendar"
                                            Readonly
                             @attributes="@context.Attrs">
                             </MTextField>
                         </ActivatorContent>
                         <ChildContent>
                             <MDatePicker @bind-Value="date"
                                              NoTitle
                                              Scrollable>
                                <MSpacer></MSpacer>
                                <MButton Text
                                          Color="primary"
                                          OnClick="() => visible = false">
                                     Cancel
                                 </MButton>
                                 <MButton Text
                                          Color="primary"
                                          OnClick="() => { trip.start = date.ToShortDateString(); visible = false;}">
                                     OK
                                 </MButton>
                             </MDatePicker>
                         </ChildContent>
                     </MMenu>
                 </MCol>

                 <MCol Cols="3">
                     <MMenu @bind-Value="visible2"
                            CloseOnContentClick="false"
                           OffsetY
                            MinWidth="290">
                         <ActivatorContent>
                             <MTextField @bind-Value="trip.end"
                                         Label="End date"
                                         PrependIcon="mdi-calendar"
                                            Readonly
                             @attributes="@context.Attrs">
                             </MTextField>
                         </ActivatorContent>
                         <ChildContent>
                             <MDatePicker @bind-Value="date2"
                                              NoTitle
                                              Scrollable>
                                <MSpacer></MSpacer>
                                <MButton Text
                                          Color="primary"
                                          OnClick="() => visible2 = false">
                                     Cancel
                                 </MButton>
                                 <MButton Text
                                          Color="primary"
                                          OnClick="() => { trip.end = date2.ToShortDateString(); visible2 = false; }">
                                     OK
                                 </MButton>
                             </MDatePicker>
                         </ChildContent>
                     </MMenu>
                 </MCol>
             </MRow>
         </MExpansionPanelContent>
     </MExpansionPanel>
 </MExpansionPanels>

 @code {

    List<BreadcrumbItem> items2 = new()
    {
        new BreadcrumbItem() {Text = "Dashboard", Disabled = false, Href = "/components/breadcrumbs", },
        new BreadcrumbItem() {Text = "Link 1", Disabled = false, Href = "/components/breadcrumbs"},
        new BreadcrumbItem() {Text = "Link 2", Disabled = true, Href = "/components/breadcrumbs"}
    };

    DateOnly date = DateOnly.FromDateTime(DateTime.Now);
    DateOnly date2 = DateOnly.FromDateTime(DateTime.Now);

    List<string> locations = new() { "Australia" , "Barbados" , "Chile" , "Denmark" , "Ecuador" , "France" };

    Trip trip = new();

    bool visible = false;
    bool visible2 = false;

    class Trip
    {
        public string name { get; set; }
        public string location { get; set; }
        public string start { get; set; }
        public string end { get; set; }
    }



    List<JsonNode> breweries = new();

    List<string> tree = new();
    List<string> types = new();

    List<Item> _items;
    bool _itemsChanged = true;

    HttpClient HttpClient = new HttpClient();

    List<Item> items
    {
        get
        {
            if(!_itemsChanged)
            {
                return _items;
            }

            var top = new Item("1" , "All Breweries" , new List<Item>());

            if(types.Any())
            {
                top.Children = types.Select(type => new Item(type , getName(type) , GetChildren(type))).ToList();
            }

            _items = new List<Item> { top };

            _itemsChanged = false;

            return _items;
        }
    }

    async Task Fetch(Item item)
    {
        var response = await HttpClient.GetAsync("https://api.openbrewerydb.org/breweries");
        if(response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            breweries = JsonSerializer.Deserialize<List<JsonNode>>(json);

            foreach(var brewery in breweries)
            {
                var type = (string)brewery["brewery_type"];
                if(!types.Contains(type))
                {
                    types.Add(type);
                }
            }

            types.Sort();

            _itemsChanged = true;
        }
    }

    List<Item> GetChildren(string type)
    {
        List<Item> result = new();
        foreach(var brewery in breweries)
        {
            if((string)brewery["brewery_type"] != type) continue;

            brewery["name"] = getName((string)brewery["name"]);

            var item = new Item((string)brewery["id"] , (string)brewery["name"] , null);
            result.Add(item);
        }

        result.Sort((x , y) => string.Compare(x.Name , y.Name , StringComparison.Ordinal));

        return result;
    }

    string getName(string name)
    {
        return $"{name[0].ToString().ToUpper()}{name[1..]}";
    }

    public class Item
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public List<Item> Children { get; set; }

        public Item( )
        {
        }

        public Item(string id , string name)
        {
            Id = id;
            Name = name;
        }

        public Item(string id , string name , List<Item> children)
        {
            Id = id;
            Name = name;
            Children = children;
        }
    }
}